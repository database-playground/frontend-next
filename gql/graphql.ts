/* eslint-disable */
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = T | null | undefined;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /**
   * Define a Relay Cursor type:
   * https://relay.dev/graphql/connections.htm#sec-Cursor
   */
  Cursor: { input: string; output: string; }
  /** The builtin Map type */
  Map: { input: any; output: any; }
  /** The builtin Time type */
  Time: { input: string; output: string; }
};

/**
 * CreateDatabaseInput is used for create Database object.
 * Input was generated by ent.
 */
export type CreateDatabaseInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  questionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** relation figure */
  relationFigure: Scalars['String']['input'];
  /** SQL schema */
  schema: Scalars['String']['input'];
  slug: Scalars['String']['input'];
};

/**
 * CreateGroupInput is used for create Group object.
 * Input was generated by ent.
 */
export type CreateGroupInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  scopeSetIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * CreateQuestionInput is used for create Question object.
 * Input was generated by ent.
 */
export type CreateQuestionInput = {
  /** Question category, e.g. 'query' */
  category: Scalars['String']['input'];
  databaseID: Scalars['ID']['input'];
  /** Question stem */
  description: Scalars['String']['input'];
  /** Question difficulty, e.g. 'easy' */
  difficulty?: InputMaybe<QuestionDifficulty>;
  /** Reference answer */
  referenceAnswer: Scalars['String']['input'];
  submissionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Question title */
  title: Scalars['String']['input'];
};

/**
 * CreateScopeSetInput is used for create ScopeSet object.
 * Input was generated by ent.
 */
export type CreateScopeSetInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  groupIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  scopes?: InputMaybe<Array<Scalars['String']['input']>>;
  slug: Scalars['String']['input'];
};

/**
 * CreateUserInput is used for create User object.
 * Input was generated by ent.
 */
export type CreateUserInput = {
  avatar?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  eventIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  groupID: Scalars['ID']['input'];
  name: Scalars['String']['input'];
  pointIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  submissionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type Database = Node & {
  __typename?: 'Database';
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  questions?: Maybe<Array<Question>>;
  /** relation figure */
  relationFigure: Scalars['String']['output'];
  /** SQL schema */
  schema: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  structure: DatabaseStructure;
};

export type DatabaseStructure = {
  __typename?: 'DatabaseStructure';
  tables: Array<DatabaseTable>;
};

export type DatabaseTable = {
  __typename?: 'DatabaseTable';
  columns: Array<Scalars['String']['output']>;
  name: Scalars['String']['output'];
};

/**
 * DatabaseWhereInput is used for filtering Database objects.
 * Input was generated by ent.
 */
export type DatabaseWhereInput = {
  and?: InputMaybe<Array<DatabaseWhereInput>>;
  /** description field predicates */
  description?: InputMaybe<Scalars['String']['input']>;
  descriptionContains?: InputMaybe<Scalars['String']['input']>;
  descriptionContainsFold?: InputMaybe<Scalars['String']['input']>;
  descriptionEqualFold?: InputMaybe<Scalars['String']['input']>;
  descriptionGT?: InputMaybe<Scalars['String']['input']>;
  descriptionGTE?: InputMaybe<Scalars['String']['input']>;
  descriptionHasPrefix?: InputMaybe<Scalars['String']['input']>;
  descriptionHasSuffix?: InputMaybe<Scalars['String']['input']>;
  descriptionIn?: InputMaybe<Array<Scalars['String']['input']>>;
  descriptionIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  descriptionLT?: InputMaybe<Scalars['String']['input']>;
  descriptionLTE?: InputMaybe<Scalars['String']['input']>;
  descriptionNEQ?: InputMaybe<Scalars['String']['input']>;
  descriptionNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  descriptionNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** questions edge predicates */
  hasQuestions?: InputMaybe<Scalars['Boolean']['input']>;
  hasQuestionsWith?: InputMaybe<Array<QuestionWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<DatabaseWhereInput>;
  or?: InputMaybe<Array<DatabaseWhereInput>>;
  /** relation_figure field predicates */
  relationFigure?: InputMaybe<Scalars['String']['input']>;
  relationFigureContains?: InputMaybe<Scalars['String']['input']>;
  relationFigureContainsFold?: InputMaybe<Scalars['String']['input']>;
  relationFigureEqualFold?: InputMaybe<Scalars['String']['input']>;
  relationFigureGT?: InputMaybe<Scalars['String']['input']>;
  relationFigureGTE?: InputMaybe<Scalars['String']['input']>;
  relationFigureHasPrefix?: InputMaybe<Scalars['String']['input']>;
  relationFigureHasSuffix?: InputMaybe<Scalars['String']['input']>;
  relationFigureIn?: InputMaybe<Array<Scalars['String']['input']>>;
  relationFigureLT?: InputMaybe<Scalars['String']['input']>;
  relationFigureLTE?: InputMaybe<Scalars['String']['input']>;
  relationFigureNEQ?: InputMaybe<Scalars['String']['input']>;
  relationFigureNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** schema field predicates */
  schema?: InputMaybe<Scalars['String']['input']>;
  schemaContains?: InputMaybe<Scalars['String']['input']>;
  schemaContainsFold?: InputMaybe<Scalars['String']['input']>;
  schemaEqualFold?: InputMaybe<Scalars['String']['input']>;
  schemaGT?: InputMaybe<Scalars['String']['input']>;
  schemaGTE?: InputMaybe<Scalars['String']['input']>;
  schemaHasPrefix?: InputMaybe<Scalars['String']['input']>;
  schemaHasSuffix?: InputMaybe<Scalars['String']['input']>;
  schemaIn?: InputMaybe<Array<Scalars['String']['input']>>;
  schemaLT?: InputMaybe<Scalars['String']['input']>;
  schemaLTE?: InputMaybe<Scalars['String']['input']>;
  schemaNEQ?: InputMaybe<Scalars['String']['input']>;
  schemaNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** slug field predicates */
  slug?: InputMaybe<Scalars['String']['input']>;
  slugContains?: InputMaybe<Scalars['String']['input']>;
  slugContainsFold?: InputMaybe<Scalars['String']['input']>;
  slugEqualFold?: InputMaybe<Scalars['String']['input']>;
  slugGT?: InputMaybe<Scalars['String']['input']>;
  slugGTE?: InputMaybe<Scalars['String']['input']>;
  slugHasPrefix?: InputMaybe<Scalars['String']['input']>;
  slugHasSuffix?: InputMaybe<Scalars['String']['input']>;
  slugIn?: InputMaybe<Array<Scalars['String']['input']>>;
  slugLT?: InputMaybe<Scalars['String']['input']>;
  slugLTE?: InputMaybe<Scalars['String']['input']>;
  slugNEQ?: InputMaybe<Scalars['String']['input']>;
  slugNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type Event = Node & {
  __typename?: 'Event';
  id: Scalars['ID']['output'];
  payload?: Maybe<Scalars['Map']['output']>;
  triggeredAt: Scalars['Time']['output'];
  type: Scalars['String']['output'];
  user: User;
  userID: Scalars['ID']['output'];
};

/** A connection to a list of items. */
export type EventConnection = {
  __typename?: 'EventConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EventEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type EventEdge = {
  __typename?: 'EventEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Event>;
};

/** Ordering options for Event connections */
export type EventOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Events. */
  field: EventOrderField;
};

/** Properties by which Event connections can be ordered. */
export enum EventOrderField {
  TriggeredAt = 'TRIGGERED_AT'
}

/**
 * EventWhereInput is used for filtering Event objects.
 * Input was generated by ent.
 */
export type EventWhereInput = {
  and?: InputMaybe<Array<EventWhereInput>>;
  /** user edge predicates */
  hasUser?: InputMaybe<Scalars['Boolean']['input']>;
  hasUserWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<EventWhereInput>;
  or?: InputMaybe<Array<EventWhereInput>>;
  /** triggered_at field predicates */
  triggeredAt?: InputMaybe<Scalars['Time']['input']>;
  triggeredAtGT?: InputMaybe<Scalars['Time']['input']>;
  triggeredAtGTE?: InputMaybe<Scalars['Time']['input']>;
  triggeredAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  triggeredAtLT?: InputMaybe<Scalars['Time']['input']>;
  triggeredAtLTE?: InputMaybe<Scalars['Time']['input']>;
  triggeredAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  triggeredAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** type field predicates */
  type?: InputMaybe<Scalars['String']['input']>;
  typeContains?: InputMaybe<Scalars['String']['input']>;
  typeContainsFold?: InputMaybe<Scalars['String']['input']>;
  typeEqualFold?: InputMaybe<Scalars['String']['input']>;
  typeGT?: InputMaybe<Scalars['String']['input']>;
  typeGTE?: InputMaybe<Scalars['String']['input']>;
  typeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  typeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  typeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  typeLT?: InputMaybe<Scalars['String']['input']>;
  typeLTE?: InputMaybe<Scalars['String']['input']>;
  typeNEQ?: InputMaybe<Scalars['String']['input']>;
  typeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** user_id field predicates */
  userID?: InputMaybe<Scalars['ID']['input']>;
  userIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  userIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  userIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type Group = Node & {
  __typename?: 'Group';
  createdAt: Scalars['Time']['output'];
  deletedAt?: Maybe<Scalars['Time']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  scopeSets?: Maybe<Array<ScopeSet>>;
  updatedAt: Scalars['Time']['output'];
};

/**
 * GroupWhereInput is used for filtering Group objects.
 * Input was generated by ent.
 */
export type GroupWhereInput = {
  and?: InputMaybe<Array<GroupWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** deleted_at field predicates */
  deletedAt?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  deletedAtLT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** description field predicates */
  description?: InputMaybe<Scalars['String']['input']>;
  descriptionContains?: InputMaybe<Scalars['String']['input']>;
  descriptionContainsFold?: InputMaybe<Scalars['String']['input']>;
  descriptionEqualFold?: InputMaybe<Scalars['String']['input']>;
  descriptionGT?: InputMaybe<Scalars['String']['input']>;
  descriptionGTE?: InputMaybe<Scalars['String']['input']>;
  descriptionHasPrefix?: InputMaybe<Scalars['String']['input']>;
  descriptionHasSuffix?: InputMaybe<Scalars['String']['input']>;
  descriptionIn?: InputMaybe<Array<Scalars['String']['input']>>;
  descriptionIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  descriptionLT?: InputMaybe<Scalars['String']['input']>;
  descriptionLTE?: InputMaybe<Scalars['String']['input']>;
  descriptionNEQ?: InputMaybe<Scalars['String']['input']>;
  descriptionNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  descriptionNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** scope_sets edge predicates */
  hasScopeSets?: InputMaybe<Scalars['Boolean']['input']>;
  hasScopeSetsWith?: InputMaybe<Array<ScopeSetWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<GroupWhereInput>;
  or?: InputMaybe<Array<GroupWhereInput>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Create a database. */
  createDatabase: Database;
  /** Create a new group. */
  createGroup?: Maybe<Group>;
  /** Create a question. */
  createQuestion: Question;
  /** Create a new scope set. */
  createScopeSet?: Maybe<ScopeSet>;
  /** Delete a database. */
  deleteDatabase: Scalars['Boolean']['output'];
  /** Delete a group. */
  deleteGroup: Scalars['Boolean']['output'];
  /** Delete a question. */
  deleteQuestion: Scalars['Boolean']['output'];
  /** Delete a scope set. */
  deleteScopeSet: Scalars['Boolean']['output'];
  /** Delete a user. */
  deleteUser: Scalars['Boolean']['output'];
  /**
   * Impersonate a user.
   *
   * Returns the token of the impersonated user.
   * You can then use the token to access the user's resources.
   */
  impersonateUser: Scalars['String']['output'];
  /** Logout from all the devices of the current user. */
  logoutAll: Scalars['Boolean']['output'];
  /** Logout a user from all his devices. */
  logoutUser: Scalars['Boolean']['output'];
  /** Submit your answer to a question. */
  submitAnswer: SubmissionResult;
  /** Update a database. */
  updateDatabase: Database;
  /** Update a group. */
  updateGroup?: Maybe<Group>;
  /** Update the information of the current user. */
  updateMe?: Maybe<User>;
  /** Update a question. */
  updateQuestion: Question;
  /** Update a scope set. */
  updateScopeSet?: Maybe<ScopeSet>;
  /** Update the information of a user. */
  updateUser?: Maybe<User>;
};


export type MutationCreateDatabaseArgs = {
  input: CreateDatabaseInput;
};


export type MutationCreateGroupArgs = {
  input: CreateGroupInput;
};


export type MutationCreateQuestionArgs = {
  input: CreateQuestionInput;
};


export type MutationCreateScopeSetArgs = {
  input: CreateScopeSetInput;
};


export type MutationDeleteDatabaseArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteGroupArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteQuestionArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteScopeSetArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteUserArgs = {
  id: Scalars['ID']['input'];
};


export type MutationImpersonateUserArgs = {
  userID: Scalars['ID']['input'];
};


export type MutationLogoutUserArgs = {
  userID: Scalars['ID']['input'];
};


export type MutationSubmitAnswerArgs = {
  answer: Scalars['String']['input'];
  id: Scalars['ID']['input'];
};


export type MutationUpdateDatabaseArgs = {
  id: Scalars['ID']['input'];
  input: UpdateDatabaseInput;
};


export type MutationUpdateGroupArgs = {
  id: Scalars['ID']['input'];
  input: UpdateGroupInput;
};


export type MutationUpdateMeArgs = {
  input: UpdateUserInput;
};


export type MutationUpdateQuestionArgs = {
  id: Scalars['ID']['input'];
  input: UpdateQuestionInput;
};


export type MutationUpdateScopeSetArgs = {
  id: Scalars['ID']['input'];
  input: UpdateScopeSetInput;
};


export type MutationUpdateUserArgs = {
  id: Scalars['ID']['input'];
  input: UpdateUserInput;
};

/**
 * An object with an ID.
 * Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
 */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID']['output'];
};

/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export enum OrderDirection {
  /** Specifies an ascending order for a given `orderBy` argument. */
  Asc = 'ASC',
  /** Specifies a descending order for a given `orderBy` argument. */
  Desc = 'DESC'
}

/**
 * Information about pagination in a connection.
 * https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
 */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']['output']>;
};

export type Point = Node & {
  __typename?: 'Point';
  description?: Maybe<Scalars['String']['output']>;
  grantedAt: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  points: Scalars['Int']['output'];
  user: User;
};

/** A connection to a list of items. */
export type PointConnection = {
  __typename?: 'PointConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PointEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type PointEdge = {
  __typename?: 'PointEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Point>;
};

/** Ordering options for Point connections */
export type PointOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Points. */
  field: PointOrderField;
};

/** Properties by which Point connections can be ordered. */
export enum PointOrderField {
  GrantedAt = 'GRANTED_AT'
}

/**
 * PointWhereInput is used for filtering Point objects.
 * Input was generated by ent.
 */
export type PointWhereInput = {
  and?: InputMaybe<Array<PointWhereInput>>;
  /** description field predicates */
  description?: InputMaybe<Scalars['String']['input']>;
  descriptionContains?: InputMaybe<Scalars['String']['input']>;
  descriptionContainsFold?: InputMaybe<Scalars['String']['input']>;
  descriptionEqualFold?: InputMaybe<Scalars['String']['input']>;
  descriptionGT?: InputMaybe<Scalars['String']['input']>;
  descriptionGTE?: InputMaybe<Scalars['String']['input']>;
  descriptionHasPrefix?: InputMaybe<Scalars['String']['input']>;
  descriptionHasSuffix?: InputMaybe<Scalars['String']['input']>;
  descriptionIn?: InputMaybe<Array<Scalars['String']['input']>>;
  descriptionIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  descriptionLT?: InputMaybe<Scalars['String']['input']>;
  descriptionLTE?: InputMaybe<Scalars['String']['input']>;
  descriptionNEQ?: InputMaybe<Scalars['String']['input']>;
  descriptionNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  descriptionNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** granted_at field predicates */
  grantedAt?: InputMaybe<Scalars['Time']['input']>;
  grantedAtGT?: InputMaybe<Scalars['Time']['input']>;
  grantedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  grantedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  grantedAtLT?: InputMaybe<Scalars['Time']['input']>;
  grantedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  grantedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  grantedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** user edge predicates */
  hasUser?: InputMaybe<Scalars['Boolean']['input']>;
  hasUserWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<PointWhereInput>;
  or?: InputMaybe<Array<PointWhereInput>>;
  /** points field predicates */
  points?: InputMaybe<Scalars['Int']['input']>;
  pointsGT?: InputMaybe<Scalars['Int']['input']>;
  pointsGTE?: InputMaybe<Scalars['Int']['input']>;
  pointsIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  pointsLT?: InputMaybe<Scalars['Int']['input']>;
  pointsLTE?: InputMaybe<Scalars['Int']['input']>;
  pointsNEQ?: InputMaybe<Scalars['Int']['input']>;
  pointsNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type Query = {
  __typename?: 'Query';
  /** Get a database by ID. */
  database: Database;
  databases: Array<Database>;
  /**
   * Get an event by ID.
   *
   * If you have the "event:read" scope, you can get any event by ID;
   * otherwise, you can only get your own events.
   */
  event: Event;
  events: EventConnection;
  /** Get a group by ID. */
  group: Group;
  groups: Array<Group>;
  me: User;
  /** Fetches an object given its ID. */
  node?: Maybe<Node>;
  /** Lookup nodes by a list of IDs. */
  nodes: Array<Maybe<Node>>;
  /**
   * Get a point grant by ID.
   *
   * If you have the "point:read" scope, you can get any point grant by ID;
   * otherwise, you can only get your own point grants.
   */
  pointGrant: Point;
  points: PointConnection;
  /** Get a question by ID. */
  question: Question;
  questions: QuestionConnection;
  /** Get the ranking. */
  ranking: RankingConnection;
  /** Get a scope set by ID or slug. */
  scopeSet: ScopeSet;
  scopeSets: Array<ScopeSet>;
  /**
   * Get a submission by ID.
   *
   * If you have the "submission:read" scope, you can get any submission by ID;
   * otherwise, you can only get your own submissions.
   */
  submission: Submission;
  submissions: SubmissionConnection;
  /** Get a user by ID. */
  user: User;
  users: UserConnection;
};


export type QueryDatabaseArgs = {
  id: Scalars['ID']['input'];
};


export type QueryEventArgs = {
  id: Scalars['ID']['input'];
};


export type QueryEventsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<EventOrder>;
  where?: InputMaybe<EventWhereInput>;
};


export type QueryGroupArgs = {
  id: Scalars['ID']['input'];
};


export type QueryNodeArgs = {
  id: Scalars['ID']['input'];
};


export type QueryNodesArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type QueryPointGrantArgs = {
  id: Scalars['ID']['input'];
};


export type QueryPointsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<PointOrder>;
  where?: InputMaybe<PointWhereInput>;
};


export type QueryQuestionArgs = {
  id: Scalars['ID']['input'];
};


export type QueryQuestionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<QuestionOrder>;
  where?: InputMaybe<QuestionWhereInput>;
};


export type QueryRankingArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  filter: RankingFilter;
  first?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryScopeSetArgs = {
  filter: ScopeSetFilter;
};


export type QuerySubmissionArgs = {
  id: Scalars['ID']['input'];
};


export type QuerySubmissionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<SubmissionOrder>;
  where?: InputMaybe<SubmissionWhereInput>;
};


export type QueryUserArgs = {
  id: Scalars['ID']['input'];
};


export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<UserOrder>;
  where?: InputMaybe<UserWhereInput>;
};

export type Question = Node & {
  __typename?: 'Question';
  /** Have you tried to solve the question? */
  attempted: Scalars['Boolean']['output'];
  /** Question category, e.g. 'query' */
  category: Scalars['String']['output'];
  database: Database;
  /** Question stem */
  description: Scalars['String']['output'];
  /** Question difficulty, e.g. 'easy' */
  difficulty: QuestionDifficulty;
  id: Scalars['ID']['output'];
  /** Get the last submission for this question. */
  lastSubmission?: Maybe<Submission>;
  /** Reference answer */
  referenceAnswer: Scalars['String']['output'];
  referenceAnswerResult: SqlExecutionResult;
  /** Have you solved the question? */
  solved: Scalars['Boolean']['output'];
  submissions: SubmissionConnection;
  /** Question title */
  title: Scalars['String']['output'];
  /** List of your submissions for this question, ordered by submitted at descending. */
  userSubmissions: Array<Submission>;
};


export type QuestionSubmissionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<SubmissionOrder>;
  where?: InputMaybe<SubmissionWhereInput>;
};

/** A connection to a list of items. */
export type QuestionConnection = {
  __typename?: 'QuestionConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<QuestionEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** QuestionDifficulty is enum for the field difficulty */
export enum QuestionDifficulty {
  Easy = 'easy',
  Hard = 'hard',
  Medium = 'medium',
  Unspecified = 'unspecified'
}

/** An edge in a connection. */
export type QuestionEdge = {
  __typename?: 'QuestionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Question>;
};

/** Ordering options for Question connections */
export type QuestionOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Questions. */
  field: QuestionOrderField;
};

/** Properties by which Question connections can be ordered. */
export enum QuestionOrderField {
  Category = 'CATEGORY',
  Difficulty = 'DIFFICULTY'
}

/**
 * QuestionWhereInput is used for filtering Question objects.
 * Input was generated by ent.
 */
export type QuestionWhereInput = {
  and?: InputMaybe<Array<QuestionWhereInput>>;
  /** category field predicates */
  category?: InputMaybe<Scalars['String']['input']>;
  categoryContains?: InputMaybe<Scalars['String']['input']>;
  categoryContainsFold?: InputMaybe<Scalars['String']['input']>;
  categoryEqualFold?: InputMaybe<Scalars['String']['input']>;
  categoryGT?: InputMaybe<Scalars['String']['input']>;
  categoryGTE?: InputMaybe<Scalars['String']['input']>;
  categoryHasPrefix?: InputMaybe<Scalars['String']['input']>;
  categoryHasSuffix?: InputMaybe<Scalars['String']['input']>;
  categoryIn?: InputMaybe<Array<Scalars['String']['input']>>;
  categoryLT?: InputMaybe<Scalars['String']['input']>;
  categoryLTE?: InputMaybe<Scalars['String']['input']>;
  categoryNEQ?: InputMaybe<Scalars['String']['input']>;
  categoryNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** description field predicates */
  description?: InputMaybe<Scalars['String']['input']>;
  descriptionContains?: InputMaybe<Scalars['String']['input']>;
  descriptionContainsFold?: InputMaybe<Scalars['String']['input']>;
  descriptionEqualFold?: InputMaybe<Scalars['String']['input']>;
  descriptionGT?: InputMaybe<Scalars['String']['input']>;
  descriptionGTE?: InputMaybe<Scalars['String']['input']>;
  descriptionHasPrefix?: InputMaybe<Scalars['String']['input']>;
  descriptionHasSuffix?: InputMaybe<Scalars['String']['input']>;
  descriptionIn?: InputMaybe<Array<Scalars['String']['input']>>;
  descriptionLT?: InputMaybe<Scalars['String']['input']>;
  descriptionLTE?: InputMaybe<Scalars['String']['input']>;
  descriptionNEQ?: InputMaybe<Scalars['String']['input']>;
  descriptionNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** difficulty field predicates */
  difficulty?: InputMaybe<QuestionDifficulty>;
  difficultyIn?: InputMaybe<Array<QuestionDifficulty>>;
  difficultyNEQ?: InputMaybe<QuestionDifficulty>;
  difficultyNotIn?: InputMaybe<Array<QuestionDifficulty>>;
  /** database edge predicates */
  hasDatabase?: InputMaybe<Scalars['Boolean']['input']>;
  hasDatabaseWith?: InputMaybe<Array<DatabaseWhereInput>>;
  /** submissions edge predicates */
  hasSubmissions?: InputMaybe<Scalars['Boolean']['input']>;
  hasSubmissionsWith?: InputMaybe<Array<SubmissionWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<QuestionWhereInput>;
  or?: InputMaybe<Array<QuestionWhereInput>>;
  /** reference_answer field predicates */
  referenceAnswer?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerContains?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerContainsFold?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerEqualFold?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerGT?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerGTE?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerHasPrefix?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerHasSuffix?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerIn?: InputMaybe<Array<Scalars['String']['input']>>;
  referenceAnswerLT?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerLTE?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerNEQ?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** title field predicates */
  title?: InputMaybe<Scalars['String']['input']>;
  titleContains?: InputMaybe<Scalars['String']['input']>;
  titleContainsFold?: InputMaybe<Scalars['String']['input']>;
  titleEqualFold?: InputMaybe<Scalars['String']['input']>;
  titleGT?: InputMaybe<Scalars['String']['input']>;
  titleGTE?: InputMaybe<Scalars['String']['input']>;
  titleHasPrefix?: InputMaybe<Scalars['String']['input']>;
  titleHasSuffix?: InputMaybe<Scalars['String']['input']>;
  titleIn?: InputMaybe<Array<Scalars['String']['input']>>;
  titleLT?: InputMaybe<Scalars['String']['input']>;
  titleLTE?: InputMaybe<Scalars['String']['input']>;
  titleNEQ?: InputMaybe<Scalars['String']['input']>;
  titleNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export enum RankingBy {
  CompletedQuestions = 'COMPLETED_QUESTIONS',
  Points = 'POINTS'
}

export type RankingConnection = {
  __typename?: 'RankingConnection';
  edges: Array<RankingEdge>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

export type RankingEdge = {
  __typename?: 'RankingEdge';
  cursor: Scalars['Cursor']['output'];
  node: User;
};

export type RankingFilter = {
  by: RankingBy;
  order: RankingOrder;
  period: RankingPeriod;
};

export enum RankingOrder {
  Asc = 'ASC',
  Desc = 'DESC'
}

export enum RankingPeriod {
  Daily = 'DAILY',
  Weekly = 'WEEKLY'
}

export type SqlExecutionResult = {
  __typename?: 'SQLExecutionResult';
  columns: Array<Scalars['String']['output']>;
  rows: Array<Array<Scalars['String']['output']>>;
};

export type ScopeSet = Node & {
  __typename?: 'ScopeSet';
  description?: Maybe<Scalars['String']['output']>;
  groups?: Maybe<Array<Group>>;
  id: Scalars['ID']['output'];
  scopes: Array<Scalars['String']['output']>;
  slug: Scalars['String']['output'];
};

/**
 * Filter for scope sets.
 *
 * The filters are mutually exclusive, only one of them can be provided.
 */
export type ScopeSetFilter = {
  /** The ID of the scope set. */
  id?: InputMaybe<Scalars['ID']['input']>;
  /** The slug of the scope set. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/**
 * ScopeSetWhereInput is used for filtering ScopeSet objects.
 * Input was generated by ent.
 */
export type ScopeSetWhereInput = {
  and?: InputMaybe<Array<ScopeSetWhereInput>>;
  /** description field predicates */
  description?: InputMaybe<Scalars['String']['input']>;
  descriptionContains?: InputMaybe<Scalars['String']['input']>;
  descriptionContainsFold?: InputMaybe<Scalars['String']['input']>;
  descriptionEqualFold?: InputMaybe<Scalars['String']['input']>;
  descriptionGT?: InputMaybe<Scalars['String']['input']>;
  descriptionGTE?: InputMaybe<Scalars['String']['input']>;
  descriptionHasPrefix?: InputMaybe<Scalars['String']['input']>;
  descriptionHasSuffix?: InputMaybe<Scalars['String']['input']>;
  descriptionIn?: InputMaybe<Array<Scalars['String']['input']>>;
  descriptionIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  descriptionLT?: InputMaybe<Scalars['String']['input']>;
  descriptionLTE?: InputMaybe<Scalars['String']['input']>;
  descriptionNEQ?: InputMaybe<Scalars['String']['input']>;
  descriptionNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  descriptionNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** groups edge predicates */
  hasGroups?: InputMaybe<Scalars['Boolean']['input']>;
  hasGroupsWith?: InputMaybe<Array<GroupWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<ScopeSetWhereInput>;
  or?: InputMaybe<Array<ScopeSetWhereInput>>;
  /** slug field predicates */
  slug?: InputMaybe<Scalars['String']['input']>;
  slugContains?: InputMaybe<Scalars['String']['input']>;
  slugContainsFold?: InputMaybe<Scalars['String']['input']>;
  slugEqualFold?: InputMaybe<Scalars['String']['input']>;
  slugGT?: InputMaybe<Scalars['String']['input']>;
  slugGTE?: InputMaybe<Scalars['String']['input']>;
  slugHasPrefix?: InputMaybe<Scalars['String']['input']>;
  slugHasSuffix?: InputMaybe<Scalars['String']['input']>;
  slugIn?: InputMaybe<Array<Scalars['String']['input']>>;
  slugLT?: InputMaybe<Scalars['String']['input']>;
  slugLTE?: InputMaybe<Scalars['String']['input']>;
  slugNEQ?: InputMaybe<Scalars['String']['input']>;
  slugNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type SolvedQuestionByDifficulty = {
  __typename?: 'SolvedQuestionByDifficulty';
  difficulty: QuestionDifficulty;
  solvedQuestions: Scalars['Int']['output'];
};

export type Submission = Node & {
  __typename?: 'Submission';
  error?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  queryResult?: Maybe<UserSqlExecutionResult>;
  question: Question;
  status: SubmissionStatus;
  submittedAt: Scalars['Time']['output'];
  submittedCode: Scalars['String']['output'];
  user: User;
};

/** A connection to a list of items. */
export type SubmissionConnection = {
  __typename?: 'SubmissionConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SubmissionEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type SubmissionEdge = {
  __typename?: 'SubmissionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Submission>;
};

/** Ordering options for Submission connections */
export type SubmissionOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Submissions. */
  field: SubmissionOrderField;
};

/** Properties by which Submission connections can be ordered. */
export enum SubmissionOrderField {
  SubmittedAt = 'SUBMITTED_AT'
}

export type SubmissionResult = {
  __typename?: 'SubmissionResult';
  error?: Maybe<Scalars['String']['output']>;
  result?: Maybe<UserSqlExecutionResult>;
};

export type SubmissionStatistics = {
  __typename?: 'SubmissionStatistics';
  attemptedQuestions: Scalars['Int']['output'];
  solvedQuestionByDifficulty: Array<SolvedQuestionByDifficulty>;
  solvedQuestions: Scalars['Int']['output'];
  totalQuestions: Scalars['Int']['output'];
};

/** SubmissionStatus is enum for the field status */
export enum SubmissionStatus {
  Failed = 'failed',
  Pending = 'pending',
  Success = 'success'
}

/**
 * SubmissionWhereInput is used for filtering Submission objects.
 * Input was generated by ent.
 */
export type SubmissionWhereInput = {
  and?: InputMaybe<Array<SubmissionWhereInput>>;
  /** error field predicates */
  error?: InputMaybe<Scalars['String']['input']>;
  errorContains?: InputMaybe<Scalars['String']['input']>;
  errorContainsFold?: InputMaybe<Scalars['String']['input']>;
  errorEqualFold?: InputMaybe<Scalars['String']['input']>;
  errorGT?: InputMaybe<Scalars['String']['input']>;
  errorGTE?: InputMaybe<Scalars['String']['input']>;
  errorHasPrefix?: InputMaybe<Scalars['String']['input']>;
  errorHasSuffix?: InputMaybe<Scalars['String']['input']>;
  errorIn?: InputMaybe<Array<Scalars['String']['input']>>;
  errorIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  errorLT?: InputMaybe<Scalars['String']['input']>;
  errorLTE?: InputMaybe<Scalars['String']['input']>;
  errorNEQ?: InputMaybe<Scalars['String']['input']>;
  errorNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  errorNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** question edge predicates */
  hasQuestion?: InputMaybe<Scalars['Boolean']['input']>;
  hasQuestionWith?: InputMaybe<Array<QuestionWhereInput>>;
  /** user edge predicates */
  hasUser?: InputMaybe<Scalars['Boolean']['input']>;
  hasUserWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<SubmissionWhereInput>;
  or?: InputMaybe<Array<SubmissionWhereInput>>;
  /** status field predicates */
  status?: InputMaybe<SubmissionStatus>;
  statusIn?: InputMaybe<Array<SubmissionStatus>>;
  statusNEQ?: InputMaybe<SubmissionStatus>;
  statusNotIn?: InputMaybe<Array<SubmissionStatus>>;
  /** submitted_at field predicates */
  submittedAt?: InputMaybe<Scalars['Time']['input']>;
  submittedAtGT?: InputMaybe<Scalars['Time']['input']>;
  submittedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  submittedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  submittedAtLT?: InputMaybe<Scalars['Time']['input']>;
  submittedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  submittedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  submittedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** submitted_code field predicates */
  submittedCode?: InputMaybe<Scalars['String']['input']>;
  submittedCodeContains?: InputMaybe<Scalars['String']['input']>;
  submittedCodeContainsFold?: InputMaybe<Scalars['String']['input']>;
  submittedCodeEqualFold?: InputMaybe<Scalars['String']['input']>;
  submittedCodeGT?: InputMaybe<Scalars['String']['input']>;
  submittedCodeGTE?: InputMaybe<Scalars['String']['input']>;
  submittedCodeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  submittedCodeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  submittedCodeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  submittedCodeLT?: InputMaybe<Scalars['String']['input']>;
  submittedCodeLTE?: InputMaybe<Scalars['String']['input']>;
  submittedCodeNEQ?: InputMaybe<Scalars['String']['input']>;
  submittedCodeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

/**
 * UpdateDatabaseInput is used for update Database object.
 * Input was generated by ent.
 */
export type UpdateDatabaseInput = {
  addQuestionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  clearDescription?: InputMaybe<Scalars['Boolean']['input']>;
  clearQuestions?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** relation figure */
  relationFigure?: InputMaybe<Scalars['String']['input']>;
  removeQuestionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** SQL schema */
  schema?: InputMaybe<Scalars['String']['input']>;
};

/**
 * UpdateGroupInput is used for update Group object.
 * Input was generated by ent.
 */
export type UpdateGroupInput = {
  addScopeSetIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  clearDescription?: InputMaybe<Scalars['Boolean']['input']>;
  clearScopeSets?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  removeScopeSetIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * UpdateQuestionInput is used for update Question object.
 * Input was generated by ent.
 */
export type UpdateQuestionInput = {
  addSubmissionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Question category, e.g. 'query' */
  category?: InputMaybe<Scalars['String']['input']>;
  clearSubmissions?: InputMaybe<Scalars['Boolean']['input']>;
  databaseID?: InputMaybe<Scalars['ID']['input']>;
  /** Question stem */
  description?: InputMaybe<Scalars['String']['input']>;
  /** Question difficulty, e.g. 'easy' */
  difficulty?: InputMaybe<QuestionDifficulty>;
  /** Reference answer */
  referenceAnswer?: InputMaybe<Scalars['String']['input']>;
  removeSubmissionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** Question title */
  title?: InputMaybe<Scalars['String']['input']>;
};

/**
 * UpdateScopeSetInput is used for update ScopeSet object.
 * Input was generated by ent.
 */
export type UpdateScopeSetInput = {
  addGroupIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  appendScopes?: InputMaybe<Array<Scalars['String']['input']>>;
  clearDescription?: InputMaybe<Scalars['Boolean']['input']>;
  clearGroups?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  removeGroupIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  scopes?: InputMaybe<Array<Scalars['String']['input']>>;
};

/**
 * UpdateUserInput is used for update User object.
 * Input was generated by ent.
 */
export type UpdateUserInput = {
  addEventIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addPointIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addSubmissionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  avatar?: InputMaybe<Scalars['String']['input']>;
  clearAvatar?: InputMaybe<Scalars['Boolean']['input']>;
  clearEvents?: InputMaybe<Scalars['Boolean']['input']>;
  clearPoints?: InputMaybe<Scalars['Boolean']['input']>;
  clearSubmissions?: InputMaybe<Scalars['Boolean']['input']>;
  groupID?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  removeEventIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removePointIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeSubmissionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type User = Node & {
  __typename?: 'User';
  avatar?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['Time']['output'];
  deletedAt?: Maybe<Scalars['Time']['output']>;
  email: Scalars['String']['output'];
  events: EventConnection;
  group: Group;
  id: Scalars['ID']['output'];
  /** The user who impersonated this user. */
  impersonatedBy?: Maybe<User>;
  name: Scalars['String']['output'];
  points: PointConnection;
  submissionStatistics: SubmissionStatistics;
  submissions: SubmissionConnection;
  /** The total points of the user. */
  totalPoints: Scalars['Int']['output'];
  updatedAt: Scalars['Time']['output'];
};


export type UserEventsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<EventOrder>;
  where?: InputMaybe<EventWhereInput>;
};


export type UserPointsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<PointOrder>;
  where?: InputMaybe<PointWhereInput>;
};


export type UserSubmissionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<SubmissionOrder>;
  where?: InputMaybe<SubmissionWhereInput>;
};

/** A connection to a list of items. */
export type UserConnection = {
  __typename?: 'UserConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
};

/** Ordering options for User connections */
export type UserOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Users. */
  field: UserOrderField;
};

/** Properties by which User connections can be ordered. */
export enum UserOrderField {
  Email = 'EMAIL'
}

export type UserSqlExecutionResult = {
  __typename?: 'UserSQLExecutionResult';
  columns: Array<Scalars['String']['output']>;
  matchAnswer: Scalars['Boolean']['output'];
  rows: Array<Array<Scalars['String']['output']>>;
};

/**
 * UserWhereInput is used for filtering User objects.
 * Input was generated by ent.
 */
export type UserWhereInput = {
  and?: InputMaybe<Array<UserWhereInput>>;
  /** avatar field predicates */
  avatar?: InputMaybe<Scalars['String']['input']>;
  avatarContains?: InputMaybe<Scalars['String']['input']>;
  avatarContainsFold?: InputMaybe<Scalars['String']['input']>;
  avatarEqualFold?: InputMaybe<Scalars['String']['input']>;
  avatarGT?: InputMaybe<Scalars['String']['input']>;
  avatarGTE?: InputMaybe<Scalars['String']['input']>;
  avatarHasPrefix?: InputMaybe<Scalars['String']['input']>;
  avatarHasSuffix?: InputMaybe<Scalars['String']['input']>;
  avatarIn?: InputMaybe<Array<Scalars['String']['input']>>;
  avatarIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  avatarLT?: InputMaybe<Scalars['String']['input']>;
  avatarLTE?: InputMaybe<Scalars['String']['input']>;
  avatarNEQ?: InputMaybe<Scalars['String']['input']>;
  avatarNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  avatarNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** deleted_at field predicates */
  deletedAt?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  deletedAtLT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** email field predicates */
  email?: InputMaybe<Scalars['String']['input']>;
  emailContains?: InputMaybe<Scalars['String']['input']>;
  emailContainsFold?: InputMaybe<Scalars['String']['input']>;
  emailEqualFold?: InputMaybe<Scalars['String']['input']>;
  emailGT?: InputMaybe<Scalars['String']['input']>;
  emailGTE?: InputMaybe<Scalars['String']['input']>;
  emailHasPrefix?: InputMaybe<Scalars['String']['input']>;
  emailHasSuffix?: InputMaybe<Scalars['String']['input']>;
  emailIn?: InputMaybe<Array<Scalars['String']['input']>>;
  emailLT?: InputMaybe<Scalars['String']['input']>;
  emailLTE?: InputMaybe<Scalars['String']['input']>;
  emailNEQ?: InputMaybe<Scalars['String']['input']>;
  emailNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** events edge predicates */
  hasEvents?: InputMaybe<Scalars['Boolean']['input']>;
  hasEventsWith?: InputMaybe<Array<EventWhereInput>>;
  /** group edge predicates */
  hasGroup?: InputMaybe<Scalars['Boolean']['input']>;
  hasGroupWith?: InputMaybe<Array<GroupWhereInput>>;
  /** points edge predicates */
  hasPoints?: InputMaybe<Scalars['Boolean']['input']>;
  hasPointsWith?: InputMaybe<Array<PointWhereInput>>;
  /** submissions edge predicates */
  hasSubmissions?: InputMaybe<Scalars['Boolean']['input']>;
  hasSubmissionsWith?: InputMaybe<Array<SubmissionWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<UserWhereInput>;
  or?: InputMaybe<Array<UserWhereInput>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type QuestionHeaderQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type QuestionHeaderQuery = { __typename?: 'Query', question: (
    { __typename?: 'Question', id: string, title: string, difficulty: QuestionDifficulty, category: string }
    & { ' $fragmentRefs'?: { 'QuestionSolvedStatusFragment': QuestionSolvedStatusFragment } }
  ) };

export type CompareAnswerQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type CompareAnswerQuery = { __typename?: 'Query', question: { __typename?: 'Question', id: string, referenceAnswerResult: { __typename?: 'SQLExecutionResult', columns: Array<string>, rows: Array<Array<string>> }, lastSubmission?: { __typename?: 'Submission', id: string, status: SubmissionStatus, error?: string | null, queryResult?: { __typename?: 'UserSQLExecutionResult', columns: Array<string>, rows: Array<Array<string>> } | null } | null } };

export type CorrectAnswerQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type CorrectAnswerQuery = { __typename?: 'Query', question: { __typename?: 'Question', id: string, referenceAnswerResult: { __typename?: 'SQLExecutionResult', columns: Array<string>, rows: Array<Array<string>> } } };

export type DatabaseRelationshipQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DatabaseRelationshipQuery = { __typename?: 'Query', question: { __typename?: 'Question', database: { __typename?: 'Database', id: string, slug: string, relationFigure: string } } };

export type QuestionDescriptionQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type QuestionDescriptionQuery = { __typename?: 'Query', question: { __typename?: 'Question', id: string, description: string } };

export type SubmitAnswerMutationVariables = Exact<{
  id: Scalars['ID']['input'];
  answer: Scalars['String']['input'];
}>;


export type SubmitAnswerMutation = { __typename?: 'Mutation', submitAnswer: { __typename?: 'SubmissionResult', error?: string | null } };

export type MyAnswerQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type MyAnswerQuery = { __typename?: 'Query', question: { __typename?: 'Question', id: string, lastSubmission?: { __typename?: 'Submission', id: string, status: SubmissionStatus, error?: string | null, queryResult?: { __typename?: 'UserSQLExecutionResult', columns: Array<string>, rows: Array<Array<string>> } | null } | null } };

export type SqlEditorContextQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type SqlEditorContextQuery = { __typename?: 'Query', question: { __typename?: 'Question', id: string, database: (
      { __typename?: 'Database', id: string }
      & { ' $fragmentRefs'?: { 'DatabaseStructureFragment': DatabaseStructureFragment } }
    ), lastSubmission?: { __typename?: 'Submission', id: string, submittedCode: string } | null } };

export type SubmissionHistoryQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type SubmissionHistoryQuery = { __typename?: 'Query', question: { __typename?: 'Question', id: string, userSubmissions: Array<{ __typename?: 'Submission', id: string, status: SubmissionStatus, submittedCode: string, submittedAt: string }> } };

export type DatabaseStructureFragment = { __typename?: 'Database', id: string, structure: { __typename?: 'DatabaseStructure', tables: Array<{ __typename?: 'DatabaseTable', columns: Array<string>, name: string }> } } & { ' $fragmentName'?: 'DatabaseStructureFragment' };

export type ChallengeStatisticsQueryVariables = Exact<{ [key: string]: never; }>;


export type ChallengeStatisticsQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, submissionStatistics: { __typename?: 'SubmissionStatistics', totalQuestions: number, solvedQuestions: number, attemptedQuestions: number } } };

export type ListQuestionsQueryVariables = Exact<{
  where?: InputMaybe<QuestionWhereInput>;
  after?: InputMaybe<Scalars['Cursor']['input']>;
}>;


export type ListQuestionsQuery = { __typename?: 'Query', questions: { __typename?: 'QuestionConnection', edges?: Array<{ __typename?: 'QuestionEdge', node?: (
        { __typename?: 'Question', id: string }
        & { ' $fragmentRefs'?: { 'QuestionCardFragment': QuestionCardFragment;'QuestionSolvedStatusFragment': QuestionSolvedStatusFragment } }
      ) | null } | null> | null, pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, endCursor?: string | null } } };

export type MaterialsSchemaCardFragment = { __typename?: 'Database', id: string, slug: string, description?: string | null } & { ' $fragmentName'?: 'MaterialsSchemaCardFragment' };

export type MaterialsSchemaContentQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type MaterialsSchemaContentQuery = { __typename?: 'Query', database: { __typename?: 'Database', id: string, schema: string } };

export type MaterialsSchemaQueryVariables = Exact<{ [key: string]: never; }>;


export type MaterialsSchemaQuery = { __typename?: 'Query', databases: Array<(
    { __typename?: 'Database', id: string }
    & { ' $fragmentRefs'?: { 'MaterialsSchemaCardFragment': MaterialsSchemaCardFragment } }
  )> };

export type CompletedQuestionsQueryVariables = Exact<{ [key: string]: never; }>;


export type CompletedQuestionsQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, submissionStatistics: { __typename?: 'SubmissionStatistics', totalQuestions: number, solvedQuestions: number } } };

export type CompletedQuestionRankingQueryVariables = Exact<{
  period: RankingPeriod;
}>;


export type CompletedQuestionRankingQuery = { __typename?: 'Query', ranking: { __typename?: 'RankingConnection', edges: Array<{ __typename?: 'RankingEdge', node: { __typename?: 'User', id: string, name: string, submissionStatistics: { __typename?: 'SubmissionStatistics', solvedQuestions: number } } }> } };

export type PointsRankingQueryVariables = Exact<{
  period: RankingPeriod;
}>;


export type PointsRankingQuery = { __typename?: 'Query', ranking: { __typename?: 'RankingConnection', edges: Array<{ __typename?: 'RankingEdge', node: { __typename?: 'User', id: string, name: string, totalPoints: number } }> } };

export type PointsQueryVariables = Exact<{ [key: string]: never; }>;


export type PointsQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, totalPoints: number, points: { __typename?: 'PointConnection', edges?: Array<{ __typename?: 'PointEdge', node?: (
          { __typename?: 'Point', id: string }
          & { ' $fragmentRefs'?: { 'PointFragmentFragment': PointFragmentFragment } }
        ) | null } | null> | null } } };

export type PointFragmentFragment = { __typename?: 'Point', description?: string | null, points: number } & { ' $fragmentName'?: 'PointFragmentFragment' };

export type ResolvedQuestionsQueryVariables = Exact<{ [key: string]: never; }>;


export type ResolvedQuestionsQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, submissionStatistics: { __typename?: 'SubmissionStatistics', totalQuestions: number, solvedQuestions: number } } };

export type QuestionInfoQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type QuestionInfoQuery = { __typename?: 'Query', question: (
    { __typename?: 'Question' }
    & { ' $fragmentRefs'?: { 'QuestionInfoFragmentFragment': QuestionInfoFragmentFragment } }
  ) };

export type QuestionInfoFragmentFragment = { __typename?: 'Question', id: string, title: string, description: string, difficulty: QuestionDifficulty, category: string } & { ' $fragmentName'?: 'QuestionInfoFragmentFragment' };

export type UserAnswerResultQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type UserAnswerResultQuery = { __typename?: 'Query', question: { __typename?: 'Question', id: string, lastSubmission?: { __typename?: 'Submission', id: string, submittedCode: string, status: SubmissionStatus, error?: string | null, queryResult?: { __typename?: 'UserSQLExecutionResult', columns: Array<string>, rows: Array<Array<string>> } | null } | null } };

export type QuestionSchemaQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type QuestionSchemaQuery = { __typename?: 'Query', question: { __typename?: 'Question', id: string, database: { __typename?: 'Database', id: string, structure: { __typename?: 'DatabaseStructure', tables: Array<{ __typename?: 'DatabaseTable', columns: Array<string>, name: string }> } } } };

export type QuestionCardFragment = (
  { __typename?: 'Question', id: string, title: string, description: string, difficulty: QuestionDifficulty, category: string }
  & { ' $fragmentRefs'?: { 'QuestionSolvedStatusFragment': QuestionSolvedStatusFragment } }
) & { ' $fragmentName'?: 'QuestionCardFragment' };

export type QuestionSolvedStatusFragment = { __typename?: 'Question', solved: boolean, attempted: boolean } & { ' $fragmentName'?: 'QuestionSolvedStatusFragment' };

export type BasicUserInfoQueryVariables = Exact<{ [key: string]: never; }>;


export type BasicUserInfoQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, name: string, email: string, avatar?: string | null, group: { __typename?: 'Group', name: string } } };

export const DatabaseStructureFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"DatabaseStructure"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Database"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"structure"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"tables"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"columns"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<DatabaseStructureFragment, unknown>;
export const MaterialsSchemaCardFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"MaterialsSchemaCard"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Database"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]} as unknown as DocumentNode<MaterialsSchemaCardFragment, unknown>;
export const PointFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"PointFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Point"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"points"}}]}}]} as unknown as DocumentNode<PointFragmentFragment, unknown>;
export const QuestionInfoFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"QuestionInfoFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Question"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"difficulty"}},{"kind":"Field","name":{"kind":"Name","value":"category"}}]}}]} as unknown as DocumentNode<QuestionInfoFragmentFragment, unknown>;
export const QuestionSolvedStatusFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"QuestionSolvedStatus"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Question"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"solved"}},{"kind":"Field","name":{"kind":"Name","value":"attempted"}}]}}]} as unknown as DocumentNode<QuestionSolvedStatusFragment, unknown>;
export const QuestionCardFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"QuestionCard"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Question"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"difficulty"}},{"kind":"Field","name":{"kind":"Name","value":"category"}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"QuestionSolvedStatus"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"QuestionSolvedStatus"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Question"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"solved"}},{"kind":"Field","name":{"kind":"Name","value":"attempted"}}]}}]} as unknown as DocumentNode<QuestionCardFragment, unknown>;
export const QuestionHeaderDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"QuestionHeader"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"question"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"difficulty"}},{"kind":"Field","name":{"kind":"Name","value":"category"}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"QuestionSolvedStatus"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"QuestionSolvedStatus"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Question"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"solved"}},{"kind":"Field","name":{"kind":"Name","value":"attempted"}}]}}]} as unknown as DocumentNode<QuestionHeaderQuery, QuestionHeaderQueryVariables>;
export const CompareAnswerDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CompareAnswer"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"question"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"referenceAnswerResult"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"columns"}},{"kind":"Field","name":{"kind":"Name","value":"rows"}}]}},{"kind":"Field","name":{"kind":"Name","value":"lastSubmission"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"queryResult"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"columns"}},{"kind":"Field","name":{"kind":"Name","value":"rows"}}]}},{"kind":"Field","name":{"kind":"Name","value":"error"}}]}}]}}]}}]} as unknown as DocumentNode<CompareAnswerQuery, CompareAnswerQueryVariables>;
export const CorrectAnswerDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CorrectAnswer"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"question"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"referenceAnswerResult"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"columns"}},{"kind":"Field","name":{"kind":"Name","value":"rows"}}]}}]}}]}}]} as unknown as DocumentNode<CorrectAnswerQuery, CorrectAnswerQueryVariables>;
export const DatabaseRelationshipDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"DatabaseRelationship"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"question"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"database"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"relationFigure"}}]}}]}}]}}]} as unknown as DocumentNode<DatabaseRelationshipQuery, DatabaseRelationshipQueryVariables>;
export const QuestionDescriptionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"QuestionDescription"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"question"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}}]} as unknown as DocumentNode<QuestionDescriptionQuery, QuestionDescriptionQueryVariables>;
export const SubmitAnswerDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"SubmitAnswer"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"answer"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"submitAnswer"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"answer"},"value":{"kind":"Variable","name":{"kind":"Name","value":"answer"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"error"}}]}}]}}]} as unknown as DocumentNode<SubmitAnswerMutation, SubmitAnswerMutationVariables>;
export const MyAnswerDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"MyAnswer"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"question"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"lastSubmission"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"queryResult"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"columns"}},{"kind":"Field","name":{"kind":"Name","value":"rows"}}]}},{"kind":"Field","name":{"kind":"Name","value":"error"}}]}}]}}]}}]} as unknown as DocumentNode<MyAnswerQuery, MyAnswerQueryVariables>;
export const SqlEditorContextDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SqlEditorContext"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"question"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"database"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"DatabaseStructure"}}]}},{"kind":"Field","name":{"kind":"Name","value":"lastSubmission"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"submittedCode"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"DatabaseStructure"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Database"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"structure"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"tables"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"columns"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<SqlEditorContextQuery, SqlEditorContextQueryVariables>;
export const SubmissionHistoryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SubmissionHistory"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"question"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"userSubmissions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"submittedCode"}},{"kind":"Field","name":{"kind":"Name","value":"submittedAt"}}]}}]}}]}}]} as unknown as DocumentNode<SubmissionHistoryQuery, SubmissionHistoryQueryVariables>;
export const ChallengeStatisticsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ChallengeStatistics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"me"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"submissionStatistics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"totalQuestions"}},{"kind":"Field","name":{"kind":"Name","value":"solvedQuestions"}},{"kind":"Field","name":{"kind":"Name","value":"attemptedQuestions"}}]}}]}}]}}]} as unknown as DocumentNode<ChallengeStatisticsQuery, ChallengeStatisticsQueryVariables>;
export const ListQuestionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ListQuestions"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"where"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"QuestionWhereInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"after"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Cursor"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"questions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"where"},"value":{"kind":"Variable","name":{"kind":"Name","value":"where"}}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"10"}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"after"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"QuestionCard"}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"QuestionSolvedStatus"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hasNextPage"}},{"kind":"Field","name":{"kind":"Name","value":"endCursor"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"QuestionSolvedStatus"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Question"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"solved"}},{"kind":"Field","name":{"kind":"Name","value":"attempted"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"QuestionCard"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Question"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"difficulty"}},{"kind":"Field","name":{"kind":"Name","value":"category"}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"QuestionSolvedStatus"}}]}}]} as unknown as DocumentNode<ListQuestionsQuery, ListQuestionsQueryVariables>;
export const MaterialsSchemaContentDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"MaterialsSchemaContent"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"database"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"schema"}}]}}]}}]} as unknown as DocumentNode<MaterialsSchemaContentQuery, MaterialsSchemaContentQueryVariables>;
export const MaterialsSchemaDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"MaterialsSchema"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"databases"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"MaterialsSchemaCard"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"MaterialsSchemaCard"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Database"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"slug"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]} as unknown as DocumentNode<MaterialsSchemaQuery, MaterialsSchemaQueryVariables>;
export const CompletedQuestionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CompletedQuestions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"me"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"submissionStatistics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"totalQuestions"}},{"kind":"Field","name":{"kind":"Name","value":"solvedQuestions"}}]}}]}}]}}]} as unknown as DocumentNode<CompletedQuestionsQuery, CompletedQuestionsQueryVariables>;
export const CompletedQuestionRankingDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CompletedQuestionRanking"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"period"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"RankingPeriod"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ranking"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"10"}},{"kind":"Argument","name":{"kind":"Name","value":"filter"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"order"},"value":{"kind":"EnumValue","value":"DESC"}},{"kind":"ObjectField","name":{"kind":"Name","value":"by"},"value":{"kind":"EnumValue","value":"COMPLETED_QUESTIONS"}},{"kind":"ObjectField","name":{"kind":"Name","value":"period"},"value":{"kind":"Variable","name":{"kind":"Name","value":"period"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"submissionStatistics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"solvedQuestions"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<CompletedQuestionRankingQuery, CompletedQuestionRankingQueryVariables>;
export const PointsRankingDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"PointsRanking"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"period"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"RankingPeriod"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ranking"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"10"}},{"kind":"Argument","name":{"kind":"Name","value":"filter"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"order"},"value":{"kind":"EnumValue","value":"DESC"}},{"kind":"ObjectField","name":{"kind":"Name","value":"by"},"value":{"kind":"EnumValue","value":"POINTS"}},{"kind":"ObjectField","name":{"kind":"Name","value":"period"},"value":{"kind":"Variable","name":{"kind":"Name","value":"period"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"totalPoints"}}]}}]}}]}}]}}]} as unknown as DocumentNode<PointsRankingQuery, PointsRankingQueryVariables>;
export const PointsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Points"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"me"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"totalPoints"}},{"kind":"Field","name":{"kind":"Name","value":"points"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"IntValue","value":"5"}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"field"},"value":{"kind":"EnumValue","value":"GRANTED_AT"}},{"kind":"ObjectField","name":{"kind":"Name","value":"direction"},"value":{"kind":"EnumValue","value":"DESC"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"PointFragment"}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"PointFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Point"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"points"}}]}}]} as unknown as DocumentNode<PointsQuery, PointsQueryVariables>;
export const ResolvedQuestionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ResolvedQuestions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"me"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"submissionStatistics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"totalQuestions"}},{"kind":"Field","name":{"kind":"Name","value":"solvedQuestions"}}]}}]}}]}}]} as unknown as DocumentNode<ResolvedQuestionsQuery, ResolvedQuestionsQueryVariables>;
export const QuestionInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"QuestionInfo"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"question"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"QuestionInfoFragment"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"QuestionInfoFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Question"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"difficulty"}},{"kind":"Field","name":{"kind":"Name","value":"category"}}]}}]} as unknown as DocumentNode<QuestionInfoQuery, QuestionInfoQueryVariables>;
export const UserAnswerResultDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"UserAnswerResult"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"question"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"lastSubmission"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"submittedCode"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"queryResult"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"columns"}},{"kind":"Field","name":{"kind":"Name","value":"rows"}}]}},{"kind":"Field","name":{"kind":"Name","value":"error"}}]}}]}}]}}]} as unknown as DocumentNode<UserAnswerResultQuery, UserAnswerResultQueryVariables>;
export const QuestionSchemaDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"QuestionSchema"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"question"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"database"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"structure"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"tables"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"columns"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<QuestionSchemaQuery, QuestionSchemaQueryVariables>;
export const BasicUserInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"BasicUserInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"me"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"avatar"}},{"kind":"Field","name":{"kind":"Name","value":"group"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<BasicUserInfoQuery, BasicUserInfoQueryVariables>;
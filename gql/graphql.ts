/* eslint-disable */
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /**
   * Define a Relay Cursor type:
   * https://relay.dev/graphql/connections.htm#sec-Cursor
   */
  Cursor: { input: any; output: any; }
  /** The builtin Time type */
  Time: { input: string; output: string; }
};

/**
 * CreateDatabaseInput is used for create Database object.
 * Input was generated by ent.
 */
export type CreateDatabaseInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  questionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** relation figure */
  relationFigure: Scalars['String']['input'];
  /** SQL schema */
  schema: Scalars['String']['input'];
  slug: Scalars['String']['input'];
};

/**
 * CreateGroupInput is used for create Group object.
 * Input was generated by ent.
 */
export type CreateGroupInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  scopeSetIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * CreateQuestionInput is used for create Question object.
 * Input was generated by ent.
 */
export type CreateQuestionInput = {
  /** Question category, e.g. 'query' */
  category: Scalars['String']['input'];
  databaseID: Scalars['ID']['input'];
  /** Question stem */
  description: Scalars['String']['input'];
  /** Question difficulty, e.g. 'easy' */
  difficulty?: InputMaybe<QuestionDifficulty>;
  /** Reference answer */
  referenceAnswer: Scalars['String']['input'];
  /** Question title */
  title: Scalars['String']['input'];
};

/**
 * CreateScopeSetInput is used for create ScopeSet object.
 * Input was generated by ent.
 */
export type CreateScopeSetInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  groupIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  scopes?: InputMaybe<Array<Scalars['String']['input']>>;
  slug: Scalars['String']['input'];
};

/**
 * CreateUserInput is used for create User object.
 * Input was generated by ent.
 */
export type CreateUserInput = {
  avatar?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  groupID: Scalars['ID']['input'];
  name: Scalars['String']['input'];
};

export type Database = Node & {
  __typename?: 'Database';
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  questions?: Maybe<Array<Question>>;
  /** relation figure */
  relationFigure: Scalars['String']['output'];
  /** SQL schema */
  schema: Scalars['String']['output'];
  slug: Scalars['String']['output'];
};

/**
 * DatabaseWhereInput is used for filtering Database objects.
 * Input was generated by ent.
 */
export type DatabaseWhereInput = {
  and?: InputMaybe<Array<DatabaseWhereInput>>;
  /** description field predicates */
  description?: InputMaybe<Scalars['String']['input']>;
  descriptionContains?: InputMaybe<Scalars['String']['input']>;
  descriptionContainsFold?: InputMaybe<Scalars['String']['input']>;
  descriptionEqualFold?: InputMaybe<Scalars['String']['input']>;
  descriptionGT?: InputMaybe<Scalars['String']['input']>;
  descriptionGTE?: InputMaybe<Scalars['String']['input']>;
  descriptionHasPrefix?: InputMaybe<Scalars['String']['input']>;
  descriptionHasSuffix?: InputMaybe<Scalars['String']['input']>;
  descriptionIn?: InputMaybe<Array<Scalars['String']['input']>>;
  descriptionIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  descriptionLT?: InputMaybe<Scalars['String']['input']>;
  descriptionLTE?: InputMaybe<Scalars['String']['input']>;
  descriptionNEQ?: InputMaybe<Scalars['String']['input']>;
  descriptionNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  descriptionNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** questions edge predicates */
  hasQuestions?: InputMaybe<Scalars['Boolean']['input']>;
  hasQuestionsWith?: InputMaybe<Array<QuestionWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<DatabaseWhereInput>;
  or?: InputMaybe<Array<DatabaseWhereInput>>;
  /** relation_figure field predicates */
  relationFigure?: InputMaybe<Scalars['String']['input']>;
  relationFigureContains?: InputMaybe<Scalars['String']['input']>;
  relationFigureContainsFold?: InputMaybe<Scalars['String']['input']>;
  relationFigureEqualFold?: InputMaybe<Scalars['String']['input']>;
  relationFigureGT?: InputMaybe<Scalars['String']['input']>;
  relationFigureGTE?: InputMaybe<Scalars['String']['input']>;
  relationFigureHasPrefix?: InputMaybe<Scalars['String']['input']>;
  relationFigureHasSuffix?: InputMaybe<Scalars['String']['input']>;
  relationFigureIn?: InputMaybe<Array<Scalars['String']['input']>>;
  relationFigureLT?: InputMaybe<Scalars['String']['input']>;
  relationFigureLTE?: InputMaybe<Scalars['String']['input']>;
  relationFigureNEQ?: InputMaybe<Scalars['String']['input']>;
  relationFigureNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** schema field predicates */
  schema?: InputMaybe<Scalars['String']['input']>;
  schemaContains?: InputMaybe<Scalars['String']['input']>;
  schemaContainsFold?: InputMaybe<Scalars['String']['input']>;
  schemaEqualFold?: InputMaybe<Scalars['String']['input']>;
  schemaGT?: InputMaybe<Scalars['String']['input']>;
  schemaGTE?: InputMaybe<Scalars['String']['input']>;
  schemaHasPrefix?: InputMaybe<Scalars['String']['input']>;
  schemaHasSuffix?: InputMaybe<Scalars['String']['input']>;
  schemaIn?: InputMaybe<Array<Scalars['String']['input']>>;
  schemaLT?: InputMaybe<Scalars['String']['input']>;
  schemaLTE?: InputMaybe<Scalars['String']['input']>;
  schemaNEQ?: InputMaybe<Scalars['String']['input']>;
  schemaNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** slug field predicates */
  slug?: InputMaybe<Scalars['String']['input']>;
  slugContains?: InputMaybe<Scalars['String']['input']>;
  slugContainsFold?: InputMaybe<Scalars['String']['input']>;
  slugEqualFold?: InputMaybe<Scalars['String']['input']>;
  slugGT?: InputMaybe<Scalars['String']['input']>;
  slugGTE?: InputMaybe<Scalars['String']['input']>;
  slugHasPrefix?: InputMaybe<Scalars['String']['input']>;
  slugHasSuffix?: InputMaybe<Scalars['String']['input']>;
  slugIn?: InputMaybe<Array<Scalars['String']['input']>>;
  slugLT?: InputMaybe<Scalars['String']['input']>;
  slugLTE?: InputMaybe<Scalars['String']['input']>;
  slugNEQ?: InputMaybe<Scalars['String']['input']>;
  slugNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type Group = Node & {
  __typename?: 'Group';
  createdAt: Scalars['Time']['output'];
  deletedAt?: Maybe<Scalars['Time']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  scopeSets?: Maybe<Array<ScopeSet>>;
  updatedAt: Scalars['Time']['output'];
};

/**
 * GroupWhereInput is used for filtering Group objects.
 * Input was generated by ent.
 */
export type GroupWhereInput = {
  and?: InputMaybe<Array<GroupWhereInput>>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** deleted_at field predicates */
  deletedAt?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  deletedAtLT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** description field predicates */
  description?: InputMaybe<Scalars['String']['input']>;
  descriptionContains?: InputMaybe<Scalars['String']['input']>;
  descriptionContainsFold?: InputMaybe<Scalars['String']['input']>;
  descriptionEqualFold?: InputMaybe<Scalars['String']['input']>;
  descriptionGT?: InputMaybe<Scalars['String']['input']>;
  descriptionGTE?: InputMaybe<Scalars['String']['input']>;
  descriptionHasPrefix?: InputMaybe<Scalars['String']['input']>;
  descriptionHasSuffix?: InputMaybe<Scalars['String']['input']>;
  descriptionIn?: InputMaybe<Array<Scalars['String']['input']>>;
  descriptionIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  descriptionLT?: InputMaybe<Scalars['String']['input']>;
  descriptionLTE?: InputMaybe<Scalars['String']['input']>;
  descriptionNEQ?: InputMaybe<Scalars['String']['input']>;
  descriptionNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  descriptionNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** scope_sets edge predicates */
  hasScopeSets?: InputMaybe<Scalars['Boolean']['input']>;
  hasScopeSetsWith?: InputMaybe<Array<ScopeSetWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<GroupWhereInput>;
  or?: InputMaybe<Array<GroupWhereInput>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Create a database. */
  createDatabase: Database;
  /** Create a new group. */
  createGroup?: Maybe<Group>;
  /** Create a question. */
  createQuestion: Question;
  /** Create a new scope set. */
  createScopeSet?: Maybe<ScopeSet>;
  /** Delete a database. */
  deleteDatabase: Scalars['Boolean']['output'];
  /** Delete a group. */
  deleteGroup: Scalars['Boolean']['output'];
  /** Delete a question. */
  deleteQuestion: Scalars['Boolean']['output'];
  /** Delete a scope set. */
  deleteScopeSet: Scalars['Boolean']['output'];
  /** Delete a user. */
  deleteUser: Scalars['Boolean']['output'];
  /**
   * Impersonate a user.
   *
   * Returns the token of the impersonated user.
   * You can then use the token to access the user's resources.
   */
  impersonateUser: Scalars['String']['output'];
  /** Logout from all the devices of the current user. */
  logoutAll: Scalars['Boolean']['output'];
  /** Logout a user from all his devices. */
  logoutUser: Scalars['Boolean']['output'];
  /** Update a database. */
  updateDatabase: Database;
  /** Update a group. */
  updateGroup?: Maybe<Group>;
  /** Update the information of the current user. */
  updateMe?: Maybe<User>;
  /** Update a question. */
  updateQuestion: Question;
  /** Update a scope set. */
  updateScopeSet?: Maybe<ScopeSet>;
  /** Update the information of a user. */
  updateUser?: Maybe<User>;
  /** Verify the registration of this user. */
  verifyRegistration: Scalars['Boolean']['output'];
};


export type MutationCreateDatabaseArgs = {
  input: CreateDatabaseInput;
};


export type MutationCreateGroupArgs = {
  input: CreateGroupInput;
};


export type MutationCreateQuestionArgs = {
  input: CreateQuestionInput;
};


export type MutationCreateScopeSetArgs = {
  input: CreateScopeSetInput;
};


export type MutationDeleteDatabaseArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteGroupArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteQuestionArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteScopeSetArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteUserArgs = {
  id: Scalars['ID']['input'];
};


export type MutationImpersonateUserArgs = {
  userID: Scalars['ID']['input'];
};


export type MutationLogoutUserArgs = {
  userID: Scalars['ID']['input'];
};


export type MutationUpdateDatabaseArgs = {
  id: Scalars['ID']['input'];
  input: UpdateDatabaseInput;
};


export type MutationUpdateGroupArgs = {
  id: Scalars['ID']['input'];
  input: UpdateGroupInput;
};


export type MutationUpdateMeArgs = {
  input: UpdateUserInput;
};


export type MutationUpdateQuestionArgs = {
  id: Scalars['ID']['input'];
  input: UpdateQuestionInput;
};


export type MutationUpdateScopeSetArgs = {
  id: Scalars['ID']['input'];
  input: UpdateScopeSetInput;
};


export type MutationUpdateUserArgs = {
  id: Scalars['ID']['input'];
  input: UpdateUserInput;
};

/**
 * An object with an ID.
 * Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
 */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID']['output'];
};

/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export enum OrderDirection {
  /** Specifies an ascending order for a given `orderBy` argument. */
  Asc = 'ASC',
  /** Specifies a descending order for a given `orderBy` argument. */
  Desc = 'DESC'
}

/**
 * Information about pagination in a connection.
 * https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
 */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']['output']>;
};

export type Query = {
  __typename?: 'Query';
  /** Get a database by ID. */
  database: Database;
  databases: Array<Database>;
  /** Get a group by ID. */
  group: Group;
  groups: Array<Group>;
  me: User;
  /** Fetches an object given its ID. */
  node?: Maybe<Node>;
  /** Lookup nodes by a list of IDs. */
  nodes: Array<Maybe<Node>>;
  /** Get a question by ID. */
  question: Question;
  questions: QuestionConnection;
  /** Get a scope set by ID or slug. */
  scopeSet: ScopeSet;
  scopeSets: Array<ScopeSet>;
  /** Get a user by ID. */
  user: User;
  users: UserConnection;
};


export type QueryDatabaseArgs = {
  id: Scalars['ID']['input'];
};


export type QueryGroupArgs = {
  id: Scalars['ID']['input'];
};


export type QueryNodeArgs = {
  id: Scalars['ID']['input'];
};


export type QueryNodesArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type QueryQuestionArgs = {
  id: Scalars['ID']['input'];
};


export type QueryQuestionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<QuestionOrder>;
  where?: InputMaybe<QuestionWhereInput>;
};


export type QueryScopeSetArgs = {
  filter: ScopeSetFilter;
};


export type QueryUserArgs = {
  id: Scalars['ID']['input'];
};


export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<UserOrder>;
  where?: InputMaybe<UserWhereInput>;
};

export type Question = Node & {
  __typename?: 'Question';
  /** Question category, e.g. 'query' */
  category: Scalars['String']['output'];
  database: Database;
  /** Question stem */
  description: Scalars['String']['output'];
  /** Question difficulty, e.g. 'easy' */
  difficulty: QuestionDifficulty;
  id: Scalars['ID']['output'];
  /** Reference answer */
  referenceAnswer: Scalars['String']['output'];
  referenceAnswerResult: SqlResponse;
  /** Question title */
  title: Scalars['String']['output'];
};

/** A connection to a list of items. */
export type QuestionConnection = {
  __typename?: 'QuestionConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<QuestionEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** QuestionDifficulty is enum for the field difficulty */
export enum QuestionDifficulty {
  Easy = 'easy',
  Hard = 'hard',
  Medium = 'medium',
  Unspecified = 'unspecified'
}

/** An edge in a connection. */
export type QuestionEdge = {
  __typename?: 'QuestionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Question>;
};

/** Ordering options for Question connections */
export type QuestionOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Questions. */
  field: QuestionOrderField;
};

/** Properties by which Question connections can be ordered. */
export enum QuestionOrderField {
  Category = 'CATEGORY',
  Difficulty = 'DIFFICULTY'
}

/**
 * QuestionWhereInput is used for filtering Question objects.
 * Input was generated by ent.
 */
export type QuestionWhereInput = {
  and?: InputMaybe<Array<QuestionWhereInput>>;
  /** category field predicates */
  category?: InputMaybe<Scalars['String']['input']>;
  categoryContains?: InputMaybe<Scalars['String']['input']>;
  categoryContainsFold?: InputMaybe<Scalars['String']['input']>;
  categoryEqualFold?: InputMaybe<Scalars['String']['input']>;
  categoryGT?: InputMaybe<Scalars['String']['input']>;
  categoryGTE?: InputMaybe<Scalars['String']['input']>;
  categoryHasPrefix?: InputMaybe<Scalars['String']['input']>;
  categoryHasSuffix?: InputMaybe<Scalars['String']['input']>;
  categoryIn?: InputMaybe<Array<Scalars['String']['input']>>;
  categoryLT?: InputMaybe<Scalars['String']['input']>;
  categoryLTE?: InputMaybe<Scalars['String']['input']>;
  categoryNEQ?: InputMaybe<Scalars['String']['input']>;
  categoryNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** description field predicates */
  description?: InputMaybe<Scalars['String']['input']>;
  descriptionContains?: InputMaybe<Scalars['String']['input']>;
  descriptionContainsFold?: InputMaybe<Scalars['String']['input']>;
  descriptionEqualFold?: InputMaybe<Scalars['String']['input']>;
  descriptionGT?: InputMaybe<Scalars['String']['input']>;
  descriptionGTE?: InputMaybe<Scalars['String']['input']>;
  descriptionHasPrefix?: InputMaybe<Scalars['String']['input']>;
  descriptionHasSuffix?: InputMaybe<Scalars['String']['input']>;
  descriptionIn?: InputMaybe<Array<Scalars['String']['input']>>;
  descriptionLT?: InputMaybe<Scalars['String']['input']>;
  descriptionLTE?: InputMaybe<Scalars['String']['input']>;
  descriptionNEQ?: InputMaybe<Scalars['String']['input']>;
  descriptionNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** difficulty field predicates */
  difficulty?: InputMaybe<QuestionDifficulty>;
  difficultyIn?: InputMaybe<Array<QuestionDifficulty>>;
  difficultyNEQ?: InputMaybe<QuestionDifficulty>;
  difficultyNotIn?: InputMaybe<Array<QuestionDifficulty>>;
  /** database edge predicates */
  hasDatabase?: InputMaybe<Scalars['Boolean']['input']>;
  hasDatabaseWith?: InputMaybe<Array<DatabaseWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<QuestionWhereInput>;
  or?: InputMaybe<Array<QuestionWhereInput>>;
  /** reference_answer field predicates */
  referenceAnswer?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerContains?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerContainsFold?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerEqualFold?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerGT?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerGTE?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerHasPrefix?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerHasSuffix?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerIn?: InputMaybe<Array<Scalars['String']['input']>>;
  referenceAnswerLT?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerLTE?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerNEQ?: InputMaybe<Scalars['String']['input']>;
  referenceAnswerNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** title field predicates */
  title?: InputMaybe<Scalars['String']['input']>;
  titleContains?: InputMaybe<Scalars['String']['input']>;
  titleContainsFold?: InputMaybe<Scalars['String']['input']>;
  titleEqualFold?: InputMaybe<Scalars['String']['input']>;
  titleGT?: InputMaybe<Scalars['String']['input']>;
  titleGTE?: InputMaybe<Scalars['String']['input']>;
  titleHasPrefix?: InputMaybe<Scalars['String']['input']>;
  titleHasSuffix?: InputMaybe<Scalars['String']['input']>;
  titleIn?: InputMaybe<Array<Scalars['String']['input']>>;
  titleLT?: InputMaybe<Scalars['String']['input']>;
  titleLTE?: InputMaybe<Scalars['String']['input']>;
  titleNEQ?: InputMaybe<Scalars['String']['input']>;
  titleNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type ScopeSet = Node & {
  __typename?: 'ScopeSet';
  description?: Maybe<Scalars['String']['output']>;
  groups?: Maybe<Array<Group>>;
  id: Scalars['ID']['output'];
  scopes: Array<Scalars['String']['output']>;
  slug: Scalars['String']['output'];
};

/**
 * Filter for scope sets.
 *
 * The filters are mutually exclusive, only one of them can be provided.
 */
export type ScopeSetFilter = {
  /** The ID of the scope set. */
  id?: InputMaybe<Scalars['ID']['input']>;
  /** The slug of the scope set. */
  slug?: InputMaybe<Scalars['String']['input']>;
};

/**
 * ScopeSetWhereInput is used for filtering ScopeSet objects.
 * Input was generated by ent.
 */
export type ScopeSetWhereInput = {
  and?: InputMaybe<Array<ScopeSetWhereInput>>;
  /** description field predicates */
  description?: InputMaybe<Scalars['String']['input']>;
  descriptionContains?: InputMaybe<Scalars['String']['input']>;
  descriptionContainsFold?: InputMaybe<Scalars['String']['input']>;
  descriptionEqualFold?: InputMaybe<Scalars['String']['input']>;
  descriptionGT?: InputMaybe<Scalars['String']['input']>;
  descriptionGTE?: InputMaybe<Scalars['String']['input']>;
  descriptionHasPrefix?: InputMaybe<Scalars['String']['input']>;
  descriptionHasSuffix?: InputMaybe<Scalars['String']['input']>;
  descriptionIn?: InputMaybe<Array<Scalars['String']['input']>>;
  descriptionIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  descriptionLT?: InputMaybe<Scalars['String']['input']>;
  descriptionLTE?: InputMaybe<Scalars['String']['input']>;
  descriptionNEQ?: InputMaybe<Scalars['String']['input']>;
  descriptionNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  descriptionNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** groups edge predicates */
  hasGroups?: InputMaybe<Scalars['Boolean']['input']>;
  hasGroupsWith?: InputMaybe<Array<GroupWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<ScopeSetWhereInput>;
  or?: InputMaybe<Array<ScopeSetWhereInput>>;
  /** slug field predicates */
  slug?: InputMaybe<Scalars['String']['input']>;
  slugContains?: InputMaybe<Scalars['String']['input']>;
  slugContainsFold?: InputMaybe<Scalars['String']['input']>;
  slugEqualFold?: InputMaybe<Scalars['String']['input']>;
  slugGT?: InputMaybe<Scalars['String']['input']>;
  slugGTE?: InputMaybe<Scalars['String']['input']>;
  slugHasPrefix?: InputMaybe<Scalars['String']['input']>;
  slugHasSuffix?: InputMaybe<Scalars['String']['input']>;
  slugIn?: InputMaybe<Array<Scalars['String']['input']>>;
  slugLT?: InputMaybe<Scalars['String']['input']>;
  slugLTE?: InputMaybe<Scalars['String']['input']>;
  slugNEQ?: InputMaybe<Scalars['String']['input']>;
  slugNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type SqlResponse = {
  __typename?: 'SqlResponse';
  columns: Array<Scalars['String']['output']>;
  rows: Array<Array<Scalars['String']['output']>>;
};

/**
 * UpdateDatabaseInput is used for update Database object.
 * Input was generated by ent.
 */
export type UpdateDatabaseInput = {
  addQuestionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  clearDescription?: InputMaybe<Scalars['Boolean']['input']>;
  clearQuestions?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  /** relation figure */
  relationFigure?: InputMaybe<Scalars['String']['input']>;
  removeQuestionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** SQL schema */
  schema?: InputMaybe<Scalars['String']['input']>;
};

/**
 * UpdateGroupInput is used for update Group object.
 * Input was generated by ent.
 */
export type UpdateGroupInput = {
  addScopeSetIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  clearDescription?: InputMaybe<Scalars['Boolean']['input']>;
  clearScopeSets?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  removeScopeSetIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * UpdateQuestionInput is used for update Question object.
 * Input was generated by ent.
 */
export type UpdateQuestionInput = {
  databaseID?: InputMaybe<Scalars['ID']['input']>;
  /** Question stem */
  description?: InputMaybe<Scalars['String']['input']>;
  /** Question difficulty, e.g. 'easy' */
  difficulty?: InputMaybe<QuestionDifficulty>;
  /** Reference answer */
  referenceAnswer?: InputMaybe<Scalars['String']['input']>;
  /** Question title */
  title?: InputMaybe<Scalars['String']['input']>;
};

/**
 * UpdateScopeSetInput is used for update ScopeSet object.
 * Input was generated by ent.
 */
export type UpdateScopeSetInput = {
  addGroupIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  appendScopes?: InputMaybe<Array<Scalars['String']['input']>>;
  clearDescription?: InputMaybe<Scalars['Boolean']['input']>;
  clearGroups?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  removeGroupIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  scopes?: InputMaybe<Array<Scalars['String']['input']>>;
};

/**
 * UpdateUserInput is used for update User object.
 * Input was generated by ent.
 */
export type UpdateUserInput = {
  avatar?: InputMaybe<Scalars['String']['input']>;
  clearAvatar?: InputMaybe<Scalars['Boolean']['input']>;
  groupID?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type User = Node & {
  __typename?: 'User';
  avatar?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['Time']['output'];
  deletedAt?: Maybe<Scalars['Time']['output']>;
  email: Scalars['String']['output'];
  group: Group;
  id: Scalars['ID']['output'];
  /** The user who impersonated this user. */
  impersonatedBy?: Maybe<User>;
  name: Scalars['String']['output'];
  updatedAt: Scalars['Time']['output'];
};

/** A connection to a list of items. */
export type UserConnection = {
  __typename?: 'UserConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['Cursor']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
};

/** Ordering options for User connections */
export type UserOrder = {
  /** The ordering direction. */
  direction?: OrderDirection;
  /** The field by which to order Users. */
  field: UserOrderField;
};

/** Properties by which User connections can be ordered. */
export enum UserOrderField {
  Email = 'EMAIL'
}

/**
 * UserWhereInput is used for filtering User objects.
 * Input was generated by ent.
 */
export type UserWhereInput = {
  and?: InputMaybe<Array<UserWhereInput>>;
  /** avatar field predicates */
  avatar?: InputMaybe<Scalars['String']['input']>;
  avatarContains?: InputMaybe<Scalars['String']['input']>;
  avatarContainsFold?: InputMaybe<Scalars['String']['input']>;
  avatarEqualFold?: InputMaybe<Scalars['String']['input']>;
  avatarGT?: InputMaybe<Scalars['String']['input']>;
  avatarGTE?: InputMaybe<Scalars['String']['input']>;
  avatarHasPrefix?: InputMaybe<Scalars['String']['input']>;
  avatarHasSuffix?: InputMaybe<Scalars['String']['input']>;
  avatarIn?: InputMaybe<Array<Scalars['String']['input']>>;
  avatarIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  avatarLT?: InputMaybe<Scalars['String']['input']>;
  avatarLTE?: InputMaybe<Scalars['String']['input']>;
  avatarNEQ?: InputMaybe<Scalars['String']['input']>;
  avatarNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  avatarNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']['input']>;
  createdAtGT?: InputMaybe<Scalars['Time']['input']>;
  createdAtGTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createdAtLT?: InputMaybe<Scalars['Time']['input']>;
  createdAtLTE?: InputMaybe<Scalars['Time']['input']>;
  createdAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** deleted_at field predicates */
  deletedAt?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  deletedAtLT?: InputMaybe<Scalars['Time']['input']>;
  deletedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  deletedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  deletedAtNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** email field predicates */
  email?: InputMaybe<Scalars['String']['input']>;
  emailContains?: InputMaybe<Scalars['String']['input']>;
  emailContainsFold?: InputMaybe<Scalars['String']['input']>;
  emailEqualFold?: InputMaybe<Scalars['String']['input']>;
  emailGT?: InputMaybe<Scalars['String']['input']>;
  emailGTE?: InputMaybe<Scalars['String']['input']>;
  emailHasPrefix?: InputMaybe<Scalars['String']['input']>;
  emailHasSuffix?: InputMaybe<Scalars['String']['input']>;
  emailIn?: InputMaybe<Array<Scalars['String']['input']>>;
  emailLT?: InputMaybe<Scalars['String']['input']>;
  emailLTE?: InputMaybe<Scalars['String']['input']>;
  emailNEQ?: InputMaybe<Scalars['String']['input']>;
  emailNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** group edge predicates */
  hasGroup?: InputMaybe<Scalars['Boolean']['input']>;
  hasGroupWith?: InputMaybe<Array<GroupWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<UserWhereInput>;
  or?: InputMaybe<Array<UserWhereInput>>;
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtGTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updatedAtLT?: InputMaybe<Scalars['Time']['input']>;
  updatedAtLTE?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type BasicUserInfoQueryVariables = Exact<{ [key: string]: never; }>;


export type BasicUserInfoQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, name: string, email: string, avatar?: string | null, group: { __typename?: 'Group', name: string } } };


export const BasicUserInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"BasicUserInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"me"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"avatar"}},{"kind":"Field","name":{"kind":"Name","value":"group"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<BasicUserInfoQuery, BasicUserInfoQueryVariables>;
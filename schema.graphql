schema {
  query: Query
  mutation: Mutation
}

"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean = true
  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @goModel(forceGenerate: Boolean, model: String, models: [String!]) on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @scope(scope: String!) on FIELD_DEFINITION

"""
CreateDatabaseInput is used for create Database object.
Input was generated by ent.
"""
input CreateDatabaseInput {
  description: String
  questionIDs: [ID!]
  """relation figure"""
  relationFigure: String!
  """SQL schema"""
  schema: String!
  slug: String!
}

"""
CreateGroupInput is used for create Group object.
Input was generated by ent.
"""
input CreateGroupInput {
  description: String
  name: String!
  scopeSetIDs: [ID!]
}

"""
CreateQuestionInput is used for create Question object.
Input was generated by ent.
"""
input CreateQuestionInput {
  """Question category, e.g. 'query'"""
  category: String!
  databaseID: ID!
  """Question stem"""
  description: String!
  """Question difficulty, e.g. 'easy'"""
  difficulty: QuestionDifficulty
  """Reference answer"""
  referenceAnswer: String!
  """Question title"""
  title: String!
}

"""
CreateScopeSetInput is used for create ScopeSet object.
Input was generated by ent.
"""
input CreateScopeSetInput {
  description: String
  groupIDs: [ID!]
  scopes: [String!]
  slug: String!
}

"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  avatar: String
  email: String!
  groupID: ID!
  name: String!
}

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor

type Database implements Node {
  description: String
  id: ID!
  questions: [Question!]
  """relation figure"""
  relationFigure: String!
  """SQL schema"""
  schema: String!
  slug: String!
}

"""
DatabaseWhereInput is used for filtering Database objects.
Input was generated by ent.
"""
input DatabaseWhereInput {
  and: [DatabaseWhereInput!]
  """description field predicates"""
  description: String
  descriptionContains: String
  descriptionContainsFold: String
  descriptionEqualFold: String
  descriptionGT: String
  descriptionGTE: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIn: [String!]
  descriptionIsNil: Boolean
  descriptionLT: String
  descriptionLTE: String
  descriptionNEQ: String
  descriptionNotIn: [String!]
  descriptionNotNil: Boolean
  """questions edge predicates"""
  hasQuestions: Boolean
  hasQuestionsWith: [QuestionWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: DatabaseWhereInput
  or: [DatabaseWhereInput!]
  """relation_figure field predicates"""
  relationFigure: String
  relationFigureContains: String
  relationFigureContainsFold: String
  relationFigureEqualFold: String
  relationFigureGT: String
  relationFigureGTE: String
  relationFigureHasPrefix: String
  relationFigureHasSuffix: String
  relationFigureIn: [String!]
  relationFigureLT: String
  relationFigureLTE: String
  relationFigureNEQ: String
  relationFigureNotIn: [String!]
  """schema field predicates"""
  schema: String
  schemaContains: String
  schemaContainsFold: String
  schemaEqualFold: String
  schemaGT: String
  schemaGTE: String
  schemaHasPrefix: String
  schemaHasSuffix: String
  schemaIn: [String!]
  schemaLT: String
  schemaLTE: String
  schemaNEQ: String
  schemaNotIn: [String!]
  """slug field predicates"""
  slug: String
  slugContains: String
  slugContainsFold: String
  slugEqualFold: String
  slugGT: String
  slugGTE: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIn: [String!]
  slugLT: String
  slugLTE: String
  slugNEQ: String
  slugNotIn: [String!]
}

type Group implements Node {
  createdAt: Time!
  deletedAt: Time
  description: String
  id: ID!
  name: String!
  scopeSets: [ScopeSet!]
  updatedAt: Time!
}

"""
GroupWhereInput is used for filtering Group objects.
Input was generated by ent.
"""
input GroupWhereInput {
  and: [GroupWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """description field predicates"""
  description: String
  descriptionContains: String
  descriptionContainsFold: String
  descriptionEqualFold: String
  descriptionGT: String
  descriptionGTE: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIn: [String!]
  descriptionIsNil: Boolean
  descriptionLT: String
  descriptionLTE: String
  descriptionNEQ: String
  descriptionNotIn: [String!]
  descriptionNotNil: Boolean
  """scope_sets edge predicates"""
  hasScopeSets: Boolean
  hasScopeSetsWith: [ScopeSetWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: GroupWhereInput
  or: [GroupWhereInput!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

type Mutation {
  """Create a database."""
  createDatabase(input: CreateDatabaseInput!): Database!
  """Create a new group."""
  createGroup(input: CreateGroupInput!): Group
  """Create a question."""
  createQuestion(input: CreateQuestionInput!): Question!
  """Create a new scope set."""
  createScopeSet(input: CreateScopeSetInput!): ScopeSet
  """Delete a database."""
  deleteDatabase(id: ID!): Boolean!
  """Delete a group."""
  deleteGroup(id: ID!): Boolean!
  """Delete a question."""
  deleteQuestion(id: ID!): Boolean!
  """Delete a scope set."""
  deleteScopeSet(id: ID!): Boolean!
  """Delete a user."""
  deleteUser(id: ID!): Boolean!
  """
  Impersonate a user.
  
  Returns the token of the impersonated user.
  You can then use the token to access the user's resources.
  """
  impersonateUser(userID: ID!): String!
  """Logout from all the devices of the current user."""
  logoutAll: Boolean!
  """Logout a user from all his devices."""
  logoutUser(userID: ID!): Boolean!
  """Update a database."""
  updateDatabase(id: ID!, input: UpdateDatabaseInput!): Database!
  """Update a group."""
  updateGroup(id: ID!, input: UpdateGroupInput!): Group
  """Update the information of the current user."""
  updateMe(input: UpdateUserInput!): User
  """Update a question."""
  updateQuestion(id: ID!, input: UpdateQuestionInput!): Question!
  """Update a scope set."""
  updateScopeSet(id: ID!, input: UpdateScopeSetInput!): ScopeSet
  """Update the information of a user."""
  updateUser(id: ID!, input: UpdateUserInput!): User
  """Verify the registration of this user."""
  verifyRegistration: Boolean!
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}

"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Query {
  """Get a database by ID."""
  database(id: ID!): Database!
  databases: [Database!]!
  """Get a group by ID."""
  group(id: ID!): Group!
  groups: [Group!]!
  me: User!
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  """Get a question by ID."""
  question(id: ID!): Question!
  questions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Questions returned from the connection."""
    orderBy: QuestionOrder
    """Filtering options for Questions returned from the connection."""
    where: QuestionWhereInput
  ): QuestionConnection!
  """Get a scope set by ID or slug."""
  scopeSet(filter: ScopeSetFilter!): ScopeSet!
  scopeSets: [ScopeSet!]!
  """Get a user by ID."""
  user(id: ID!): User!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder
    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}

type Question implements Node {
  """Question category, e.g. 'query'"""
  category: String!
  database: Database!
  """Question stem"""
  description: String!
  """Question difficulty, e.g. 'easy'"""
  difficulty: QuestionDifficulty!
  id: ID!
  """Reference answer"""
  referenceAnswer: String!
  referenceAnswerResult: SqlResponse!
  """Question title"""
  title: String!
}

"""A connection to a list of items."""
type QuestionConnection {
  """A list of edges."""
  edges: [QuestionEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""QuestionDifficulty is enum for the field difficulty"""
enum QuestionDifficulty {
  easy
  hard
  medium
  unspecified
}

"""An edge in a connection."""
type QuestionEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Question
}

"""Ordering options for Question connections"""
input QuestionOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Questions."""
  field: QuestionOrderField!
}

"""Properties by which Question connections can be ordered."""
enum QuestionOrderField {
  CATEGORY
  DIFFICULTY
}

"""
QuestionWhereInput is used for filtering Question objects.
Input was generated by ent.
"""
input QuestionWhereInput {
  and: [QuestionWhereInput!]
  """category field predicates"""
  category: String
  categoryContains: String
  categoryContainsFold: String
  categoryEqualFold: String
  categoryGT: String
  categoryGTE: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryIn: [String!]
  categoryLT: String
  categoryLTE: String
  categoryNEQ: String
  categoryNotIn: [String!]
  """description field predicates"""
  description: String
  descriptionContains: String
  descriptionContainsFold: String
  descriptionEqualFold: String
  descriptionGT: String
  descriptionGTE: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIn: [String!]
  descriptionLT: String
  descriptionLTE: String
  descriptionNEQ: String
  descriptionNotIn: [String!]
  """difficulty field predicates"""
  difficulty: QuestionDifficulty
  difficultyIn: [QuestionDifficulty!]
  difficultyNEQ: QuestionDifficulty
  difficultyNotIn: [QuestionDifficulty!]
  """database edge predicates"""
  hasDatabase: Boolean
  hasDatabaseWith: [DatabaseWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: QuestionWhereInput
  or: [QuestionWhereInput!]
  """reference_answer field predicates"""
  referenceAnswer: String
  referenceAnswerContains: String
  referenceAnswerContainsFold: String
  referenceAnswerEqualFold: String
  referenceAnswerGT: String
  referenceAnswerGTE: String
  referenceAnswerHasPrefix: String
  referenceAnswerHasSuffix: String
  referenceAnswerIn: [String!]
  referenceAnswerLT: String
  referenceAnswerLTE: String
  referenceAnswerNEQ: String
  referenceAnswerNotIn: [String!]
  """title field predicates"""
  title: String
  titleContains: String
  titleContainsFold: String
  titleEqualFold: String
  titleGT: String
  titleGTE: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIn: [String!]
  titleLT: String
  titleLTE: String
  titleNEQ: String
  titleNotIn: [String!]
}

type ScopeSet implements Node {
  description: String
  groups: [Group!]
  id: ID!
  scopes: [String!]!
  slug: String!
}

"""
Filter for scope sets.

The filters are mutually exclusive, only one of them can be provided.
"""
input ScopeSetFilter {
  """The ID of the scope set."""
  id: ID
  """The slug of the scope set."""
  slug: String
}

"""
ScopeSetWhereInput is used for filtering ScopeSet objects.
Input was generated by ent.
"""
input ScopeSetWhereInput {
  and: [ScopeSetWhereInput!]
  """description field predicates"""
  description: String
  descriptionContains: String
  descriptionContainsFold: String
  descriptionEqualFold: String
  descriptionGT: String
  descriptionGTE: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIn: [String!]
  descriptionIsNil: Boolean
  descriptionLT: String
  descriptionLTE: String
  descriptionNEQ: String
  descriptionNotIn: [String!]
  descriptionNotNil: Boolean
  """groups edge predicates"""
  hasGroups: Boolean
  hasGroupsWith: [GroupWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: ScopeSetWhereInput
  or: [ScopeSetWhereInput!]
  """slug field predicates"""
  slug: String
  slugContains: String
  slugContainsFold: String
  slugEqualFold: String
  slugGT: String
  slugGTE: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIn: [String!]
  slugLT: String
  slugLTE: String
  slugNEQ: String
  slugNotIn: [String!]
}

type SqlResponse {
  columns: [String!]!
  rows: [[String!]!]!
}

"""The builtin Time type"""
scalar Time

"""
UpdateDatabaseInput is used for update Database object.
Input was generated by ent.
"""
input UpdateDatabaseInput {
  addQuestionIDs: [ID!]
  clearDescription: Boolean
  clearQuestions: Boolean
  description: String
  """relation figure"""
  relationFigure: String
  removeQuestionIDs: [ID!]
  """SQL schema"""
  schema: String
}

"""
UpdateGroupInput is used for update Group object.
Input was generated by ent.
"""
input UpdateGroupInput {
  addScopeSetIDs: [ID!]
  clearDescription: Boolean
  clearScopeSets: Boolean
  description: String
  name: String
  removeScopeSetIDs: [ID!]
}

"""
UpdateQuestionInput is used for update Question object.
Input was generated by ent.
"""
input UpdateQuestionInput {
  databaseID: ID
  """Question stem"""
  description: String
  """Question difficulty, e.g. 'easy'"""
  difficulty: QuestionDifficulty
  """Reference answer"""
  referenceAnswer: String
  """Question title"""
  title: String
}

"""
UpdateScopeSetInput is used for update ScopeSet object.
Input was generated by ent.
"""
input UpdateScopeSetInput {
  addGroupIDs: [ID!]
  appendScopes: [String!]
  clearDescription: Boolean
  clearGroups: Boolean
  description: String
  removeGroupIDs: [ID!]
  scopes: [String!]
}

"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  avatar: String
  clearAvatar: Boolean
  groupID: ID
  name: String
}

type User implements Node {
  avatar: String
  createdAt: Time!
  deletedAt: Time
  email: String!
  group: Group!
  id: ID!
  """The user who impersonated this user."""
  impersonatedBy: User
  name: String!
  updatedAt: Time!
}

"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: User
}

"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}

"""Properties by which User connections can be ordered."""
enum UserOrderField {
  EMAIL
}

"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  and: [UserWhereInput!]
  """avatar field predicates"""
  avatar: String
  avatarContains: String
  avatarContainsFold: String
  avatarEqualFold: String
  avatarGT: String
  avatarGTE: String
  avatarHasPrefix: String
  avatarHasSuffix: String
  avatarIn: [String!]
  avatarIsNil: Boolean
  avatarLT: String
  avatarLTE: String
  avatarNEQ: String
  avatarNotIn: [String!]
  avatarNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """email field predicates"""
  email: String
  emailContains: String
  emailContainsFold: String
  emailEqualFold: String
  emailGT: String
  emailGTE: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIn: [String!]
  emailLT: String
  emailLTE: String
  emailNEQ: String
  emailNotIn: [String!]
  """group edge predicates"""
  hasGroup: Boolean
  hasGroupWith: [GroupWhereInput!]
  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: UserWhereInput
  or: [UserWhereInput!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}